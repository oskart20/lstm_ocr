
def train(run_name, start_epoch, stop_epoch, img_w):
    # Input Parameters
    img_h = 64
    words_per_epoch = 16000
    val_split = 0.2
    val_words = int(words_per_epoch * (val_split))
    multi_fonts = 'False'
    curriculum = True

    # Network parameters
    conv_filters = 16
    kernel_size = (3, 3) # default (3, 3)
    kernel_size_2 = (4, 4)
    kernel_size_3 = (5, 5)
    kernel_size_4 = (2, 2)
    pool_size = 2
    time_dense_size = 32
    rnn_size = 512
    minibatch_size = 32

    if K.image_data_format() == 'channels_first':
        input_shape = (1, img_w, img_h)
    else:
        input_shape = (img_w, img_h, 1)

    fdir = os.path.dirname(get_file('wordlists.tgz',
                                    origin='http://www.mythic-ai.com/datasets/wordlists.tgz', untar=True))

    img_gen = TextImageGenerator(monogram_file=os.path.join(fdir, 'wordlist_mono_clean.txt'),
                                 bigram_file=os.path.join(fdir, 'wordlist_bi_clean.txt'),
                                 minibatch_size=minibatch_size,
                                 img_w=img_w,
                                 img_h=img_h,
                                 downsample_factor=(pool_size ** 2),
                                 multi_fonts=multi_fonts,
                                 val_split=words_per_epoch - val_words,
                                 curriculum=curriculum
                                 )
    act = 'relu'
    input_data = Input(name='the_input', shape=input_shape, dtype='float32')
    inner = Conv2D(conv_filters, kernel_size, padding='same', activation=act, kernel_initializer='he_normal', name='conv1')(input_data)
    inner = MaxPooling2D(pool_size=(pool_size, pool_size), name='max1')(inner)
    inner = Conv2D(conv_filters, kernel_size, padding='same', activation=act, kernel_initializer='he_normal', name='conv2')(inner)
    inner = MaxPooling2D(pool_size=(pool_size, pool_size), name='max2')(inner)

    inner_2 = Conv2D(conv_filters, kernel_size_2, padding='same', activation=act, kernel_initializer='he_normal', name='conv1_2')(input_data)
    inner_2 = MaxPooling2D(pool_size=(pool_size, pool_size), name='max1_2')(inner_2)
    inner_2 = Conv2D(conv_filters, kernel_size_2, padding='same', activation=act, kernel_initializer='he_normal', name='conv2_2')(inner_2)
    inner_2 = MaxPooling2D(pool_size=(pool_size, pool_size), name='max2_2')(inner_2)

    inner_3 = Conv2D(conv_filters, kernel_size_3, padding='same', activation=act, kernel_initializer='he_normal', name='conv1_3')(input_data)
    inner_3 = MaxPooling2D(pool_size=(pool_size, pool_size), name='max1_3')(inner_3)
    inner_3 = Conv2D(conv_filters, kernel_size_3, padding='same', activation=act, kernel_initializer='he_normal', name='conv2_3')(inner_3)
    inner_3 = MaxPooling2D(pool_size=(pool_size, pool_size), name='max2_3')(inner_3)

    inner_4 = Conv2D(conv_filters, kernel_size_4, padding='same', activation=act, kernel_initializer='he_normal', name='conv1_4')(input_data)
    inner_4 = MaxPooling2D(pool_size=(pool_size, pool_size), name='max1_4')(inner_4)
    inner_4 = Conv2D(conv_filters, kernel_size_4, padding='same', activation=act, kernel_initializer='he_normal', name='conv2_4')(inner_4)
    inner_4 = MaxPooling2D(pool_size=(pool_size, pool_size), name='max2_4')(inner_4)

    conv_to_rnn_dims = (img_w // (pool_size ** 2), (img_h // (pool_size ** 2)) * conv_filters)
    
    inner = Reshape(target_shape=conv_to_rnn_dims, name='reshape')(inner)
    inner_2 = Reshape(target_shape=conv_to_rnn_dims, name='reshape_2')(inner_2)
    inner_3 = Reshape(target_shape=conv_to_rnn_dims, name='reshape_3')(inner_3)
    inner_4 = Reshape(target_shape=conv_to_rnn_dims, name='reshape_4')(inner_4)

    # cuts down input size going into RNN:
    inner = Dense(time_dense_size, activation=act, name='dense1')(concatenate([inner, inner_2, inner_3, inner_4]))

    # Two layers of bidirectional LSTMs:
    lstm_1 = LSTM(rnn_size, return_sequences=True, kernel_initializer='he_normal', name='LSTM1')(inner)
    lstm_1b = LSTM(rnn_size, return_sequences=True, go_backwards=True, kernel_initializer='he_normal', name='LSTM1_b')(inner)
    lstm1_merged = add([lstm_1, lstm_1b])
    lstm_2 = LSTM(rnn_size, return_sequences=True, kernel_initializer='he_normal', name='LSTM2')(lstm1_merged)
    lstm_2b = LSTM(rnn_size, return_sequences=True, go_backwards=True, kernel_initializer='he_normal', name='LSTM2_b')(lstm1_merged)

    # transforms RNN output to character activations:
    inner = Dense(img_gen.get_output_size(), kernel_initializer='he_normal',
                  name='dense2')(concatenate([lstm_2, lstm_2b]))
    y_pred = Activation('softmax', name='softmax')(inner)
    Model(inputs=input_data, outputs=y_pred).summary()

    labels = Input(name='the_labels', shape=[img_gen.absolute_max_string_len], dtype='float32')
    input_length = Input(name='input_length', shape=[1], dtype='int64')
    label_length = Input(name='label_length', shape=[1], dtype='int64')
    # Keras doesn't currently support loss funcs with extra parameters
    # so CTC loss is implemented in a lambda layer
    loss_out = Lambda(ctc_lambda_func, output_shape=(1,), name='ctc')([y_pred, labels, input_length, label_length])

    # clipnorm seems to speeds up convergence
    sgd = SGD(lr=0.02, decay=1e-6, momentum=0.9, nesterov=True, clipnorm=5)

    model = Model(inputs=[input_data, labels, input_length, label_length], outputs=loss_out)

    # the loss calc occurs elsewhere, so use a dummy lambda func for the loss
    model.compile(loss={'ctc': lambda y_true, y_pred: y_pred}, optimizer=sgd)
    if start_epoch > 0:
        weight_file = os.path.join(OUTPUT_DIR, os.path.join(run_name, 'weights%02d.h5' % (start_epoch - 1)))
        model.load_weights(weight_file)
    # captures output of softmax so we can decode the output during visualization
    test_func = K.function([input_data], [y_pred])

    viz_cb = VizCallback(run_name, test_func, img_gen.next_val())

    model.fit_generator(generator=img_gen.next_train(),
                        steps_per_epoch=(words_per_epoch - val_words) // minibatch_size,
                        epochs=stop_epoch,
                        validation_data=img_gen.next_val(),
                        validation_steps=val_words // minibatch_size,
                        callbacks=[viz_cb, img_gen],
                        initial_epoch=start_epoch)

    return model